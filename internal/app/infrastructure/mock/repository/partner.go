// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/infrastructure/repository/partner.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/AkyurekDogan/exinity-task/internal/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPartner is a mock of Partner interface.
type MockPartner struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerMockRecorder
}

// MockPartnerMockRecorder is the mock recorder for MockPartner.
type MockPartnerMockRecorder struct {
	mock *MockPartner
}

// NewMockPartner creates a new mock instance.
func NewMockPartner(ctrl *gomock.Controller) *MockPartner {
	mock := &MockPartner{ctrl: ctrl}
	mock.recorder = &MockPartnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartner) EXPECT() *MockPartnerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPartner) Get(f model.Filter) (*model.Partner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", f)
	ret0, _ := ret[0].(*model.Partner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPartnerMockRecorder) Get(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPartner)(nil).Get), f)
}
