// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/infrastructure/repository/match.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/AkyurekDogan/exinity-task/internal/app/infrastructure/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMatch is a mock of Match interface.
type MockMatch struct {
	ctrl     *gomock.Controller
	recorder *MockMatchMockRecorder
}

// MockMatchMockRecorder is the mock recorder for MockMatch.
type MockMatchMockRecorder struct {
	mock *MockMatch
}

// NewMockMatch creates a new mock instance.
func NewMockMatch(ctrl *gomock.Controller) *MockMatch {
	mock := &MockMatch{ctrl: ctrl}
	mock.recorder = &MockMatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatch) EXPECT() *MockMatchMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMatch) Get(filter model.MatchFilter) (model.MatchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filter)
	ret0, _ := ret[0].(model.MatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMatchMockRecorder) Get(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMatch)(nil).Get), filter)
}
