// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/infrastructure/repository/skill.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/AkyurekDogan/exinity-task/internal/app/infrastructure/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPartnerSkill is a mock of PartnerSkill interface.
type MockPartnerSkill struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerSkillMockRecorder
}

// MockPartnerSkillMockRecorder is the mock recorder for MockPartnerSkill.
type MockPartnerSkillMockRecorder struct {
	mock *MockPartnerSkill
}

// NewMockPartnerSkill creates a new mock instance.
func NewMockPartnerSkill(ctrl *gomock.Controller) *MockPartnerSkill {
	mock := &MockPartnerSkill{ctrl: ctrl}
	mock.recorder = &MockPartnerSkillMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerSkill) EXPECT() *MockPartnerSkillMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPartnerSkill) Get(f model.Filter) (*model.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", f)
	ret0, _ := ret[0].(*model.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPartnerSkillMockRecorder) Get(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPartnerSkill)(nil).Get), f)
}
